<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Plot</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .button-container {
            margin-top: 10px;
        }
        .button-container button {
            font-size: 18px;
            margin-right: 10px;
            padding: 10px;
        }
        #plot-container {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <h1>SÃ©lection et modification des valeurs avec plusieurs formes</h1>
    <div id="plot-container"></div>
    
    <div class="button-container">
        <button onclick="drawShape('circle')">âš« Cercle</button>
        <button onclick="drawShape('rectangle')">â—¼ Rectangle</button>
        <button onclick="drawShape('freehand')">âœŽ Libre</button>
        <button onclick="modifyValues()">âœ” Modifier</button>
        <button onclick="resetValues()">ðŸ”„ RÃ©initialiser</button>
        <button onclick="saveValues()">ðŸ’¾ Enregistrer</button>
    </div>

    <script>
        let eps_r = Array(100).fill().map(() => Array(400).fill(6));
        eps_r[0] = Array(400).fill(1); // Interface Air/parement
        let X = [];
        let Y = [];
        for (let i = 0; i < 100; i++) {
            for (let j = 0; j < 400; j++) {
                X.push(j);
                Y.push(i);
            }
        }

        let shapes = [];
        let trace = {
            x: X,
            y: Y,
            mode: 'markers',
            marker: {
                color: eps_r.flat(),
                colorscale: 'Viridis',
                size: 10,
                colorbar: { tickvals: [1, 5, 10], ticktext: ['1', '5', '10'] },
                cmin: 1,
                cmax: 10
            },
            type: 'scatter'
        };

        let layout = {
            title: 'SÃ©lection et modification des valeurs avec plusieurs formes',
            xaxis: { title: 'Colonne' },
            yaxis: { title: 'Ligne', autorange: 'reversed' },
            showlegend: false,
            grid: { rowcolor: 'black', rowalpha: 0.1 },
            dragmode: 'drawopenpath'
        };

        Plotly.newPlot('plot-container', [trace], layout);

        function drawShape(shapeType) {
            const plot = document.getElementById('plot-container');
            plot.on('plotly_relayout', (eventData) => {
                let x = eventData['xaxis.range[0]'];
                let y = eventData['yaxis.range[0]'];
                // Handle the drawing of different shapes (circle, rectangle, freehand)
                // Placeholder functionality for now
            });
        }

        function modifyValues() {
            const newValue = parseFloat(prompt("Entrez la nouvelle valeur (> 0):", "6"));
            if (isNaN(newValue) || newValue <= 0) {
                alert('Valeur invalide. Entrez un nombre positif.');
                return;
            }

            // Modify the values in the matrix eps_r here based on the selected shape
        }

        function resetValues() {
            eps_r = Array(100).fill().map(() => Array(400).fill(6));
            Plotly.react('plot-container', [{
                x: X,
                y: Y,
                mode: 'markers',
                marker: {
                    color: eps_r.flat(),
                    colorscale: 'Viridis',
                    size: 10,
                    colorbar: { tickvals: [1, 5, 10], ticktext: ['1', '5', '10'] },
                    cmin: 1,
                    cmax: 10
                },
                type: 'scatter'
            }]);
        }

        function saveValues() {
            const blob = new Blob([JSON.stringify(eps_r)], { type: 'application/json' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'eps_r.json';
            link.click();
        }
    </script>
</body>
</html>
